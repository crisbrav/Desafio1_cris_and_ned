enum TipoOnda { SENOIDAL, TRIANGULAR, CUADRADA, DESCONOCIDA };

TipoOnda identificarTipoOnda(float* senal, int numMuestras, float amplitud, float frecuencia) {
  if (numMuestras < 2) {
    return DESCONOCIDA;  // No hay suficientes datos para procesar
  }

  if (frecuencia > 50) {
    return DESCONOCIDA;  // La frecuencia es demasiado alta para procesar
  }

  // Identificar onda senoidal
  bool esSenoidal = true;
  for (int i = 1; i < numMuestras - 1; i++) {
    if (senal[i] != senal[i - 1] && senal[i] != senal[i + 1]) {
      esSenoidal = false;
      break;
    }
  }
  if (esSenoidal) {
    return SENOIDAL;
  }

  // Identificar onda triangular
  bool esTriangular = true;
  int contadorRectas = 0;
  float rectaMax = 0;
  float rectaMin = 0;
  for (int i = 1; i < numMuestras - 1; i++) {
    if (senal[i] > senal[i - 1] && senal[i] > senal[i + 1]) {
      contadorRectas++;
      rectaMax = senal[i];
    } else if (senal[i] < senal[i - 1] && senal[i] < senal[i + 1]) {
      contadorRectas++;
      rectaMin = senal[i];
    }
  }
  if (contadorRectas > 1 && rectaMax == amplitud && rectaMin == -amplitud) {
    return TRIANGULAR;
  }

  // Identificar onda cuadrada
  bool esCuadrada = true;
  for (int i = 1; i < numMuestras - 1; i++) {
    if (senal[i] != amplitud && senal[i] != -amplitud) {
      esCuadrada = false;
      break;
    }
  }
  if (esCuadrada) {
    return CUADRADA;
  }

  return DESCONOCIDA;  // No se puede identificar el tipo de onda
}
